
params {

    //which modules are run
    modules {
        sra2fastq = false
        faqcs = false
        hostRemoval = false
        runAssembly = false
        annotation = false
        binning = false
        phageFinder = true //true by default -- will run if non-viral reads are annotated
        refBasedAnalysis = false
        snpTree = false
        readsTaxonomyAssignment = false
        contigsTaxonomyAssignment = false
        secondaryMetaboliteAnalysis = false
    }

    outputLocations {
        //everything in its separate output for the moment
        sra2fastqOutDir = "EDGE_output/SRA"
        processProvidedContigsOutDir = "EDGE_output/ProcessedContigs"
        qcOutDir = "EDGE_output/ReadsQC"
        hostRemovalOutDir = "EDGE_output/HostRemoval"
        assemblyOutDir = "EDGE_output/AssemblyBasedAnalysis"
        contigsTaxonomyOutDir = "EDGE_output/ContigTaxonomyAssignment"
        phageFinderOutDir = "EDGE_output/PhageFinder"
        binningOutDir = "EDGE_output/Binning"
        readsTaxonomyOutDir = "EDGE_output/ReadsTaxonomyAssignment"
        annotationOutDir = "EDGE_output/Annotation"
        smaOutDir = "EDGE_output/AntiSMASH"
        refBasedOutDir = "EDGE_output/ReferenceBasedAnalysis"
        phylogenyOutDir = "EDGE_output/SNP_Phylogeny"
        reportOutDir = "EDGE_output/Report"

    }

    //module parameters -- passed directly into subworkflows according to best practices
    //these are the default values
    shared {
        inputFastq = []
        inputFastq2 = []
        inputContigs = "${projectDir}/nf_assets/NO_FILE3" //contigs provided as input to entire pipeline
        assembledContigs = "${projectDir}/nf_assets/NO_FILE3" //contigs provided to bypass assembly
        pairedFile = false
        projName = "Project"
        fastqSource = "Illumina"
    }

    sra2fastq {
        accessions = []
    }

    faqcs{
        trimQual = 20
        trim5end = 0
        trim3end = 0
        trimAdapter = false
        trimPolyA = false
        artifactFile = "${projectDir}/nf_assets/NO_FILE3"
        minLen = 50
        avgQual = 0
        numN = 2
        filtLC = 0.85
        filtPhiX = false

    }

    hostRemoval {
        host = ["${projectDir}/nf_assets/NO_FILE3"]
        similarity = 90
        bwaMemOptions = null
    }

    assembly {
        //assemblers: IDBA_UD, SPAdes, Unicycler, Megahit, LRASM
        assembler = "IDBA_UD"
        minContigSize = 200
        idba{
            maxK = null
            minK = 31
            step = 20
        }
        spades {
            pacbio = "${projectDir}/nf_assets/NO_FILE3"
            nanopore = "${projectDir}/nf_assets/NO_FILE4"
            algorithm = null
        }
        megahit {
            preset = null
        }
        unicycler {
            longreads = "${projectDir}/nf_assets/NO_FILE3"
            minLongReads = 2000
            bridgingMode = "normal"
        }
        lrasm {
            preset = null
            algorithm = null
            ec = null
            numConsensus = null
        }

    }

    annotation {
        contigSizeForAnnotation = 700
        taxKingdom = null
        //annotaters: prokka, ratt
        annotateProgram = "prokka" //default
        customProtein = "${projectDir}/nf_assets/NO_FILE" //setup for optional file pattern
        customHMM = "${projectDir}/nf_assets/NO_FILE2"
        sourceGBK = null
        evalue = null
        gcode = null
        keggView = false
    }

    binning {
        binningMinLength = 1000
        binningMaxItr = 50
        binningProb = 0.9
        //107 or 40
        binningMarkerSet =107
        binningAbundFile = "${projectDir}/nf_assets/NO_FILE3"
        doCheckM = false
        checkMdb = "${projectDir}/../../../database/checkM"
    }


    r2c {
        r2c_aligner = "bwa"
        r2c_aligner_options = ""
        extractUnmapped = false
        rowLimit = 3000
    }

    readsTaxonomy {
        splitTrimMinQ = 20
        //RTA tools: gottcha-genDB-b,gottcha-speDB-b,gottcha-strDB-b,gottcha-genDB-v,gottcha-speDB-v,gottcha-strDB-v,gottcha2-speDB-b,pangia,bwa,metaphlan4,kraken2,centrifuge,diamond
        enabledTools = "gottcha-genDB-b,gottcha-speDB-b,gottcha-strDB-b,gottcha-genDB-v,gottcha-speDB-v,gottcha-strDB-v,gottcha2-speDB-b,pangia,bwa,metaphlan4,kraken2,centrifuge,diamond"
        baseDB = "${projectDir}/../../../database"
        custom_gottcha_genDB_b = null
        custom_gottcha_speDB_b = null
        custom_gottcha_strDB_b = null
        custom_gottcha_genDB_v = null
        custom_gottcha_speDB_v = null
        custom_gottcha_strDB_v = null
        custom_gottcha2_speDB_b = "${projectDir}/../../../database/GOTTCHA2/RefSeq-r220_BAVxH-cg/gottcha_db.species.fna"
        custom_gottcha2_speDB_v = null
        custom_gottcha2_genDB_v= null
        custom_bwa_db= null
        custom_metaphlan_db= null
        custom_kraken_db= null
        custom_pangia_db= null
        custom_diamond_db= null
        custom_centrifuge_db = null

    }

    contigsTaxonomy {
        miccrDB = "${projectDir}/../../../database/miccrDB"
        rowLimit = 3000
    }

    SMA {
        database = "${projectDir}/../../../database/antiSMASH" //path to downloaded database location (download-antismash-databases --database-dir <DBPATH>)
        smaTaxon = 'bacteria'
        clusterblast = false 
        subclusterblast = true
        knownclusterblast = true
        mibig = false
        smcogs = false 
        pfam2go = false
        asf = true
        rre = true
        fullhmm = false 
        tigrfam = false
        cassis = false //only with fungi
    }

    refBased {
        selectGenomes = []
        referenceGenomes = []
        //expects id_mapping.txt in the same directory as refDB
        refDB = "${projectDir}/../../../database/bwa_index/NCBI-Bacteria-Virus.fna"
        genomeLocation = "${projectDir}/../../../database/NCBI_genomes"
        r2gAligner = "bowtie2" //bowtie2, bwa, minimap2
        r2gAlignerOptions = ""
        r2gMinMapQual = null
        r2gMaxClip = null
        r2gVariantCall = false //needs genbank file
        r2gVariantCallMinQual = null
        r2gVariantCallPloidy = null

        //read extraction
        r2gMapUnmapped = false
        r2gExtractMapped = false
        r2gExtractUnmapped = false

        //consensus options
        r2gGetConsensus = false
        r2gConsensusMinMapQual = null
        r2gConsensusMinCov = null
        r2gConsensusMaxCov = null
        r2gConsensusMinBaseQual = null
        r2gConsensusAltProp = null
        r2gConsensusAltIndelProp = null
        r2gConsensusDisableBAQ = false
        r2gConsensusPCRdedup = false
        r2gConsensusHomopolymerFilt = false
        r2gConsensusStrandBiasFilt = false
        r2gConsensusVarlogOpt = false
        r2gConsensusCompOpt = false
    } 

    contigsToRef {
        identity = 85
        contigRefDB = "${projectDir}/../../../database/miccrDB"
        mapUnmappedContigs = false
    }

    snpTree {
        //SNP DB path. Should contain SNPdb, bwa_index, NCBI genomes
        snpDBbase="${projectDir}/../../../database"
        //SNP databases: Ecoli, Yersinia, Francisella, Brucella, Bacillus
        snpDBname="Ecoli"
        //List of genome name from NCBI genomes see $EDGE/edge_ui/data/Ref_list.json
        snpGenomes= []
        //User-provided reference genomes
        snpGenomesFiles= []
        //A reference genome from above two options for reads/contigs mapping
        snpRefGenome= null
        // SRA accessions ByrRun, ByExp, BySample, ByStudy
        phylAccessions = []
        //FastTree or RAxML
        treeMaker= "FastTree"
        phameBootstrap= false
        phameBootstrapNum=100
    }


}

//container settings
apptainer {
    enabled = true
    pullTimeout = "1 hour"
    runOptions = "--compat"
}

//discover and auto-bind subworkflow bin folders
nextflow.enable.moduleBinaries = true

//which containers to use for which processes
process {
    withLabel: 'sra2fastq' {
        container = 'ghcr.io/lanl-bioinformatics/edge_sra2fastq:1.6.3'
    }
    withLabel: 'countFastq' {
        container = 'ghcr.io/lanl-bioinformatics/edge_count_fastq:0.3.0'
    }
    withLabel: 'processContigs' {
        container = 'ghcr.io/lanl-bioinformatics/edge_count_fastq:0.3.0'
    }
    withLabel: 'qc'{
        container= 'ghcr.io/lanl-bioinformatics/edge_run_faqcs:1.6.1'
    }
    withLabel: 'hostRemoval' {
        container= 'apwat/host_removal:1.7.5'
    }
    withLabel: 'assembly' {
        container = 'ghcr.io/lanl-bioinformatics/edge_run_assembly:1.7.0'
    }
    withLabel: 'r2c' {
        container = 'apwat/run_r2c:1.7'
    }
    withLabel: 'r2g' {
        container = 'apwat/ref_based:0.18'
    }
    withLabel: 'rta' {
        container = 'apwat/reads_taxonomy:1.15'
    }
    withLabel: 'cta' {
        container = 'apwat/contigs_taxonomy:1.12'
    }
    withLabel: 'annotation' {
        container = 'apwat/annotation:0.6'
    }
    withLabel: 'phageFinder' {
        container = 'apwat/phage_finder:1.2'
    }
    withLabel: 'sma' {
        container = 'apwat/sma:0.14'
    }
    withLabel: 'binning' {
        container = 'apwat/binning:1.0'
    }
    withLabel: 'phyl' {
        container = 'apwat/snp_tree:0.6'
    }
    withLabel: 'report' {
        container = 'apwat/edge_report:0.5'
    }
}

//submission rate limit: needed for sra2fastq to operate correctly
executor {
    submitRateLimit = '1/5sec'
}

process.cpus = 4
